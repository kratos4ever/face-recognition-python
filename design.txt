1. Invoke the face_recognition command from python with a batch mode? with accuracy estimates as well. 
The accuracy setting - How to normalize it. Smaller the number - closer the match?

===WORK STEPS====
1. Write test program to call dlib face_recognition to load images from disk and id the unkown images - DONE
2. enhance the program to connect to the train_img table and download the images - according to the folder 
structure below, run the encoding/face detection and see if the image is fine. then delete it
3. write another program to connect to the stream_img table - download the images by lan_id, place them 
in the folder structure, run the facial id - update the results to db
4. Run the above program as a scheduled batch for docker.
5. Build the docker container.
6. If docker fails, somehow get this working as a desktop softwre in 027 and get it running


Docker commands
cd ./docker/dock
docker build -t biometric-sense/bio1 --rm=true -f ./Dockerfile . 
docker images -all
docker run --name bio_ONE biometric-sense/bio1:latest 


==== PROGRAM DESIGN ====

face_recognition needs a proper well illuminated high quality benchmark image - This is obtained from the train_img table and downloaded on the 
first attempt - into a folder with the lan_id as the user's lanid. 
Folder structure
Data/
		.
		.
		.
		. . ./LANID/.
					.
					.
					. . ./BENCHMARK/First file from train_img - to be downloaded everytime from train_img - for data safety.
					.
					.
					. . ./TRAINING/subsequent files from train_img -> to be used for OpenCV, also should include false positives from stream_img flagged by supervisors - from the stream_img table - to be deleted as soon as the openCV retraining is done. WORK ON THIS ONCE DLIB is done
					.
					.
					. . ./STREAMING/temp folder for downloading the streaming images - images to be deleted as soon as the facial id work is done



21. Write a python batch job, that can read the stream_img and train_img tables and get all the stream_img records that are unprocessed, grouped by lan_id.
Then for each lan_id, get to the folder of the lan_id that contains the benchmark image. If it doesn't exist, then 